=begin
SmartMemo API

SmartMemoのAPI仕様書

The version of the OpenAPI document: 1.0.0
Generated by: https://github.com/openapitools/openapi-generator.git

=end
require "set"
class MemosController < ApplicationController
  def create_memo
    @memo = Memo.create(title: params[:title], content: params[:content], user_id: @default)

    params[:tags].each do |tag|
      if tag[:is_user_defined]
        Tagging.create(memo_id: @memo.id, tag_id: tag[:is_user_defined])
      else
        @tag = Tag.create(name: tag[:name], user_id: @default)
        Tagging.create(memo_id: @memo.id, tag_id: @tag.id)
      end
    end

    render json: @memo.as_json(include: { tags: { only: [ :id, :name ] } })
  end

  def destroy
    Memo.find(params[:id]).destroy
    # Your code here

    render json: { "message" => "yes, it worked" }, status: 204
  end

  def show
    # Your code here
    @memo = Memo.find(params[:id])

    render json: @memo.as_json(include: { tags: { only: [ :id, :name ] } })
  end

  def index
    @memos = User.find(@default).memos.includes(:tags)

    render json: @memos.as_json(include: { tags: { only: [ :id, :name ] } })
  end

  def create
  end

  def update
    @updated_tag_ids = Set.new(params[:tags].map { |tag| tag[:id] }.compact)
    @taggings = Memo.find(params[:id]).taggings

    @taggings.each do |tagging|
      unless @updated_tag_ids.include?(tagging.tag_id)
        tagging.destroy
      end
    end

    @memo = Memo.find(params[:id]).update(title: params[:title], content: params[:content])
    render json: @memo.as_json(include: { tags: { only: [ :id, :name ] } })
  end
end
