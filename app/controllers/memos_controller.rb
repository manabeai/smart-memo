=begin
SmartMemo API

SmartMemoのAPI仕様書

The version of the OpenAPI document: 1.0.0
Generated by: https://github.com/openapitools/openapi-generator.git

=end
require "set"
class MemosController < ApplicationController
  before_action :set_user_id

  def create_memo
    @memo = Memo.create!(title: params[:title], content: params[:content], user_id: @user_id)
  
    if params[:tags].nil? || params[:tags].empty?
      render json: { error: "タグが必要です" }, status: :unprocessable_entity and return
    end
  
    params[:tags].each do |tag|
      if tag[:is_user_defined].nil? && Tag.exists?(name: tag[:name])
        Tagging.create!(memo_id: @memo.id, tag_id: Tag.find_by(name: tag[:name]).id)
      else
        @tag = Tag.create!(name: tag[:name], user_id: @user_id)
        Tagging.create!(memo_id: @memo.id, tag_id: @tag.id)
      end
    end
  
    render json: {
      title: @memo.title,
      content: @memo.content,
      tags: @memo.tags.map do |tag|
        {
          name: tag.name,
          is_user_defined: tag.user_id == @user_id ? tag.id : nil
        }
      end
    }
  rescue ActiveRecord::RecordInvalid => e
    render json: { error: "メモの作成に失敗しました", details: e.message }, status: :unprocessable_entity
  rescue => e
    render json: { error: "予期しないエラーが発生しました", details: e.message }, status: :internal_server_error
  end  

  def create
    @memo = Memo.new(title: params[:title], content: params[:content], user_id: @user_id)
    if @memo.save
      render json: @memo, status: :created
    else
      render json: { error: "メモの作成に失敗しました", details: @memo.errors.full_messages }, status: :unprocessable_entity
    end
  end

  def destroy
    memo = Memo.find(params[:id])
    memo.destroy!
    render json: { message: "メモが削除されました" }, status: :no_content
  rescue ActiveRecord::RecordNotFound
    render json: { error: "指定されたメモが見つかりません" }, status: :not_found
  rescue => e
    render json: { error: "メモの削除に失敗しました", details: e.message }, status: :internal_server_error
  end

  def show
    @memo = Memo.find(params[:id])
    render json: @memo.as_json(include: { tags: { only: [ :id, :name ] } })
  rescue ActiveRecord::RecordNotFound
    render json: { error: "指定されたメモが見つかりません" }, status: :not_found
  end

  def index
    @memos = User.find(@user_id).memos.includes(:tags).order(updated_at: :desc)
    render json: @memos.as_json(include: { tags: { only: [ :id, :name ] } })
  rescue ActiveRecord::RecordNotFound
    render json: { error: "ユーザーが見つかりません" }, status: :not_found
  end

  def update
    @memo = Memo.find(params[:id])
    @updated_tag_ids = Set.new(params[:tags].map { |tag| tag[:id] }.compact)

    @memo.taggings.each do |tagging|
      tagging.destroy unless @updated_tag_ids.include?(tagging.tag_id)
    end

    params[:tags].each do |tag|
      if Tagging.find_by(memo_id: @memo.id, tag_id: tag[:id]).nil?
        Tagging.create!(memo_id: @memo.id, tag_id: tag[:id])
      end
    end

    if @memo.update(title: params[:title], content: params[:content])
      render json: @memo.as_json(include: { tags: { only: [ :id, :name ] } })
    else
      render json: { error: "メモの更新に失敗しました", details: @memo.errors.full_messages }, status: :unprocessable_entity
    end
  rescue ActiveRecord::RecordNotFound
    render json: { error: "指定されたメモが見つかりません" }, status: :not_found
  rescue => e
    render json: { error: "メモの更新中にエラーが発生しました", details: e.message }, status: :internal_server_error
  end

  private

  def set_user_id
    # 認証をスキップして、デフォルトのユーザーIDを設定
    @user_id = User.first&.id || 1
    session[:user_id] = @user_id

    # 本番環境では認証が必須となるように設定
    unless Rails.env.development? || Rails.env.test?
      if @user_id.nil?
        render json: { error: "ユーザーが認証されていません" }, status: :unauthorized
      end
    end
  end
end