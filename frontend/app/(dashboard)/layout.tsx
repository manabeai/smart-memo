'use client';
import React, { useState, useEffect } from 'react'
import type { Metadata } from "next";
import localFont from "next/font/local";
import "@/app/globals.css";
import { PlusCircle, Moon, Sun, Search, Pin, Trash, Mic, Image, CheckSquare, Type, X, Archive, Share2, Twitter, Link, MessageCircle, Grid, List, Edit, Sparkles } from 'lucide-react';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
import { SidebarProvider, SidebarTrigger } from "@/components/ui/sidebar"
import { Button } from '@/components/ui/button'
import { AppSidebar } from "@/components/app-sidebar"
import { TextEditor } from "@/components/text-editor"
import MemoComponent from "@/components/MemoComponent";
import { SignInButton } from '@/components/sign-in-bottun'
import { Tag } from '@/components/memo-card'
import { AppSidebarProps } from '@/components/app-sidebar';
import api from '@/utils/index'

const geistSans = localFont({
	src: "../fonts/GeistVF.woff",
	variable: "--font-geist-sans",
	weight: "100 900",
});

const geistMono = localFont({
	src: "../fonts/GeistMonoVF.woff",
	variable: "--font-geist-mono",
	weight: "100 900",
});

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

type ViewMode = 'grid' | 'list'

export default function RootLayout({ children }: Readonly<{ children: React.ReactNode; }>) {
	const [isDarkTheme, setIsDarkTheme] = useState(false);
	const [tags, setTags] = useState<Tag[]>([]);
	const [selectedTag, setSelectedTag] = useState<null | number>(null)

	const fetchTags = async () => {
		try {
		  const response = await api.get('/tags');
		  setTags(response.data);
		} catch (error) {
		  console.error("タグの取得に失敗しました:", error);
		}
	  };
	useEffect(() => {
	  fetchTags(); 
	}, []); 
	
	const handleTagClick = (tagId: number) => {
	  setSelectedTag(tagId);
	};
	
	return (
		<html lang="ja">
			<TooltipProvider>
				<body className={`${geistSans.variable} ${geistMono.variable} antialiased h-auto`}>

								{children}

				</body>
			</TooltipProvider>
		</html>

	);
}
